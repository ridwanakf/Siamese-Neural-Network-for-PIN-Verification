import numpy as np
import tensorflow as tf

test_data1 = np.array([0.0012870858190581203, 0.001099268440157175, 0.0018273633904755116, 0.0018722976092249155, 0.0009633602458052337, 0.002143629128113389, 0.0012870858190581203, 0.001082083792425692, 0.001099268440157175, 0.0018722976092249155, 0.0009633602458052337, 0.002143629128113389, 0.0041611152701079845, 0.007287847809493542, 0.004089906811714172, 0.004520203452557325, 0.0041310545057058334, 0.005811088718473911, 0.0041611152701079845, 0.0034666885621845722, 0.007287847809493542, 0.004520203452557325, 0.0041310545057058334, 0.005811088718473911, 0.077, 0.073, 0.076, 0.077, 0.073, 0.068, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.011764707043766975, 0.003921568859368563, 0.007843137718737125, 0.011764707043766975, 0.003921568859368563, 0.007843137718737125, 0.027450982481241226, 0.0313725508749485, 0.0313725508749485, 0.027450982481241226, 0.02352941408753395, 0.027450982481241226], dtype=np.float32)

test_data2 = np.array([0.0004466943792067468, 0.004045075736939907, 0.005095476284623146, 0.0009695036569610238, 0.00036205476499162614, 0.00036205476499162614, 0.00010235906665911898, 0.004367880057543516, 0.005095476284623146, 0.0009695036569610238, 0.02212340198457241, 0.00036205476499162614, 0.6678950190544128, 0.2927020192146301, 0.19044892489910126, 0.08729719370603561, 0.030053069815039635, 0.030053069815039635, 0.9948286414146423, 0.4452820420265198, 0.19044892489910126, 0.08729719370603561, 0.05658451095223427, 0.030053069815039635, 0.1, 0.086, 0.068, 0.086, 0.091, 0.042, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.007843137718737125, 0.003921568859368563, 0.01568627543747425, 0.003921568859368563, 0.01568627543747425, 0.007843137718737125, 0.0784313753247261, 0.05098039656877518, 0.062745101749897, 0.03921568766236305, 0.08235294371843338, 0.05882353335618973], dtype=np.float32)


# Load TFLite model and allocate tensors.
interpreter = tf.contrib.lite.Interpreter(model_path="converted_model_new.tflite")
interpreter.allocate_tensors()

# Get input and output tensors.
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Test model on random input data.
# input_shape1 = input_details[0]['shape']
# input_shape2 = input_details[1]['shape']
# print('input shape1 =', input_shape1)
# print('input shape2 =', input_shape2)

# change the following line to feed into your own data.

# input_data1 = np.array(np.random.random_sample(input_shape1), dtype=np.float32)
# input_data2 = np.array(np.random.random_sample(input_shape1), dtype=np.float32)
# interpreter.set_tensor(input_details[0]['index'], input_data1)
# interpreter.set_tensor(input_details[1]['index'], input_data2)


test_data1 = test_data1.reshape(input_details[0]['shape'])
test_data2 = test_data2.reshape(input_details[0]['shape'])


interpreter.set_tensor(input_details[0]['index'], test_data1)
interpreter.set_tensor(input_details[1]['index'], test_data2)

interpreter.invoke()
output_data = interpreter.get_tensor(output_details[0]['index']) # 0 = index outputnya (bisa aja output lebih dari 1)
print(output_data)
